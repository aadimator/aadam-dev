<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aadam</title>
<link>https://aadam.dev/blog/index.html</link>
<atom:link href="https://aadam.dev/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>{{&lt; meta description-meta &gt;}}</description>
<image>
<url>https://aadam.dev/assets/logo.png</url>
<title>Aadam</title>
<link>https://aadam.dev/blog/index.html</link>
</image>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Tue, 06 Jun 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>The Language Conundrum: Picking the Right Tool for Bioinformatics Success</title>
  <dc:creator>Aadam </dc:creator>
  <link>https://aadam.dev/blog/2023/06/06/language-conundrum/index.html</link>
  <description><![CDATA[ 




<p>As I prepare to embark on my Ph.D.&nbsp;journey in Bioinformatics this fall, I find myself facing an important decision that will shape my path in this field: which programming language should I dedicate my time and resources to? Bioinformatics, at its core, is the <strong>marriage of biology and computer science</strong>, where computational tools and algorithms are used to analyze and interpret biological data. A programming language serves as a fundamental tool in this process, allowing us to manipulate data, implement algorithms, and build bioinformatics tools. With numerous programming languages available, each with its own strengths and applications, the question arises: which language should I choose for long-term proficiency and to create impactful bioinformatics solutions? In this blog post, I turn to the bioinformatics and programming language communities to seek their insights and perspectives on this crucial decision.</p>
<section id="why-the-right-programming-language-matters" class="level1">
<h1>Why the Right Programming Language Matters</h1>
<p>In the ever-evolving field of bioinformatics, the choice of programming language plays a pivotal role in our productivity, efficiency, and the scalability of our research. As bioinformatics researchers, we deal with vast amounts of biological data, complex algorithms, and the need for rapid prototyping. Due to the inherently complex and diverse nature of biological systems and data, an effective description or mathematical modeling necessitates a flexible programming language capable of connecting various types of highly structured data <span class="citation" data-cites="roesch2023">(Roesch et al. 2023)</span>. A suitable programming language empowers us to navigate these challenges effectively, enabling us to manipulate data, implement algorithms, and build robust bioinformatics tools.</p>
</section>
<section id="python-the-powerhouse-of-bioinformatics" class="level1 page-columns page-full">
<h1>Python: The Powerhouse of Bioinformatics</h1>
<p><a href="https://www.python.org/" title="Python">Python</a> has emerged as the language of choice for many bioinformaticians, and for good reason. Its popularity stems from its versatility, extensive libraries, and community support. Python’s rich ecosystem provides a wide range of tools and libraries for data analysis, visualization, and statistical modeling. Additionally, if your research involves machine learning (ML) and deep learning (DL) applications, Python becomes an even more compelling option.</p>
<section id="undisputed-ai-king" class="level2">
<h2 class="anchored" data-anchor-id="undisputed-ai-king">Undisputed AI King</h2>
<p>Python boasts an extensive collection of ML and DL frameworks, such as <code>TensorFlow</code>, <code>Keras</code>, and <code>PyTorch</code>, which have gained widespread adoption and support in the ML community. These frameworks provide a solid foundation for implementing complex algorithms, training models, and analyzing data. The vast community surrounding Python ensures a constant stream of updates, advancements, and support, making it a reliable choice for those venturing into ML and DL in the context of bioinformatics.</p>
</section>
<section id="two-language-problem" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="two-language-problem">Two-Language Problem</h2>
<div class="page-columns page-full"><p>However, it’s important to acknowledge that Python does suffer from what is often referred to as the “two-language problem”<sup>1</sup>. While Python excels in high-level scripting, data analysis, and ML/DL tasks, it may not be the most efficient language for computationally intensive or performance-critical tasks. In such cases, bioinformaticians often resort to using lower-level languages like C or C++ to achieve the desired speed and performance.</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;The “two-language problem” refers to situations where one language is used for high-level data analysis and scripting (often a scripting language like Python or R), while another language is used for performance-critical tasks or lower-level operations (often a compiled language like C++ or Java).</p></li></div></div>
<p>This two-language problem poses a challenge for bioinformaticians, as it requires them to switch between Python for its ease of use and extensive libraries, and other languages for computationally intensive tasks. It can lead to code fragmentation, increased development time, and complexities in integrating different components.</p>
<p>Despite this limitation, Python’s versatility, extensive libraries, and strong ML and DL support still position it as a powerhouse in the field of bioinformatics, enabling researchers to tackle diverse challenges and make significant advancements in their studies. It remains a preferred choice for many due to its ease of use, wide adoption, and vast ecosystem.</p>
</section>
</section>
<section id="julia-unleashing-high-performance-in-bioinformatics" class="level1">
<h1>Julia: Unleashing High Performance in Bioinformatics</h1>
<p><a href="https://julialang.org/">Julia</a>, a relatively new programming language, has been gaining traction in the bioinformatics community for its unique features and promises to address the challenges faced by other languages. Julia stands out with its three hallmarks: speed, abstraction, and metaprogramming, making it particularly suitable for meeting the current and emerging demands of biomedical science <span class="citation" data-cites="roesch2023">(Roesch et al. 2023)</span>.</p>
<section id="speed" class="level2">
<h2 class="anchored" data-anchor-id="speed">Speed</h2>
<p>Speed is a critical factor in bioinformatics, where large-scale data analysis and computationally intensive tasks are commonplace. Julia’s just-in-time (JIT) compilation and type inference capabilities contribute to its impressive performance. The language’s ability to efficiently leverage hardware resources, including multiple CPU cores and distributed computing, allows for faster execution times, reducing processing bottlenecks and enabling researchers to analyze larger datasets with greater efficiency.</p>
</section>
<section id="abstraction-metaprogramming" class="level2">
<h2 class="anchored" data-anchor-id="abstraction-metaprogramming">Abstraction &amp; Metaprogramming</h2>
<p>Abstraction and metaprogramming are essential features that empower bioinformaticians to write expressive and concise code while maintaining readability and modularity. Julia’s sophisticated type system and multiple dispatch mechanism facilitate the creation of reusable and composable software components. Moreover, metaprogramming capabilities enable dynamic code generation and specialization, enabling researchers to adapt their code to varying experimental setups and data structures efficiently, proving most valuable in various simulation tasks.</p>
</section>
<section id="solves-two-language-problem" class="level2">
<h2 class="anchored" data-anchor-id="solves-two-language-problem">Solves Two-Language Problem</h2>
<p>One of Julia’s primary selling points is its aim to solve the two-language problem. The creators of Julia recognized the limitations and complexities of switching between multiple languages for different tasks. By providing a single language that combines the ease of use and high-level abstractions of languages like Python with the performance of lower-level languages like C++, Julia aims to streamline bioinformatics workflows and eliminate the need for constant language switching.</p>
</section>
<section id="growing-ecosystem" class="level2">
<h2 class="anchored" data-anchor-id="growing-ecosystem">Growing Ecosystem</h2>
<p>Julia’s ecosystem is rapidly expanding, especially in the fields of scientific computing and bioinformatics. The <a href="https://biojulia.dev/"><code>BioJulia</code></a> organization plays a significant role in providing essential infrastructure and packages tailored specifically for bioinformaticians. These packages cover a wide range of bioinformatics tasks, including sequence analysis, genomics, and molecular dynamics simulations, further solidifying Julia’s position as a viable choice for bioinformatics research.</p>
</section>
<section id="young-and-naive" class="level2">
<h2 class="anchored" data-anchor-id="young-and-naive">Young and naive</h2>
<p>However, it’s important to note that Julia is still a young language compared to more established options like Python. While it has seen remarkable growth and adoption in the past couple of years, there may be certain gaps in its ecosystem or limitations in terms of available libraries or tools for specific bioinformatics tasks. Furthermore, Yuri Vishnevsky in his article “<a href="https://yuri.is/not-julia/" title="Why I no longer recommend Julia">Why I no longer recommend Julia</a>”, highlighted his <strong>concerns about Julia’s correctness</strong> and pointed out specific challenges related to its generality, lack of formal interfaces, and unspecified semantics in certain scenarios. He expressed skepticism about whether Julia’s correctness problems can be effectively resolved given its current design and community practices. It’s crucial for bioinformaticians to be aware of such viewpoints and carefully consider the trade-offs associated with language choices. While Julia offers compelling features and benefits for bioinformatics, including its speed, abstraction, and metaprogramming capabilities, the concerns raised by Vishnevsky emphasize the need for thorough evaluation and consideration of the risks involved.</p>
<p>Julia’s combination of speed, abstraction, metaprogramming, and its aim to solve the two-language problem make it an enticing option for bioinformaticians. With its growing ecosystem and support from community like <code>BioJulia</code>, the language holds great promise for advancing bioinformatics research and driving innovation in biomedical science.</p>
</section>
</section>
<section id="rust-the-secure-and-reliable-option" class="level1 page-columns page-full">
<h1>Rust: The Secure and Reliable Option</h1>
<p><a href="https://www.rust-lang.org/">Rust</a> is a relatively newer language that has gained popularity in recent years due to its emphasis on safety and performance. With its strong focus on memory safety and zero-cost abstractions, Rust offers a compelling option for bioinformatics projects where safety and efficiency are paramount.</p>
<section id="safety-and-memory-management" class="level2">
<h2 class="anchored" data-anchor-id="safety-and-memory-management">Safety and Memory Management</h2>
<p>One of Rust’s standout features is its ownership system, which enables fine-grained control over memory allocation and deallocation. By enforcing strict borrowing and ownership rules, Rust prevents common programming errors like null pointer dereferences, data races, and memory leaks. This level of safety is especially crucial in bioinformatics, where processing large-scale genomic datasets and building robust tools require rock-solid reliability.</p>
</section>
<section id="performance-and-concurrency" class="level2">
<h2 class="anchored" data-anchor-id="performance-and-concurrency">Performance and Concurrency</h2>
<p>Rust’s performance characteristics are highly appealing, making it a suitable choice for computationally intensive bioinformatics tasks. The language leverages low-level control without sacrificing developer productivity, enabling efficient utilization of system resources. Additionally, Rust’s built-in concurrency mechanisms, such as lightweight threads (known as “<code>async</code>”) and the Actor model (via libraries like “<code>Actix</code>”), provide opportunities for parallel and concurrent processing in bioinformatics pipelines.</p>
</section>
<section id="ecosystem-and-tooling" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ecosystem-and-tooling">Ecosystem and Tooling</h2>
<div class="page-columns page-full"><p>While Rust is gaining momentum in various domains, including systems programming, web development, and networking, its bioinformatics ecosystem is still maturing. The availability of bioinformatics-specific libraries and tools in Rust might be more limited compared to more established languages like Python and Julia. However, Rust’s ecosystem is steadily growing, and community-driven initiatives are working to fill these gaps. This seems like a more viable option especially for me, as my PhD will revolve around single-cell analysis, and 10x Genomics<sup>2</sup> has started using Rust as their main language for different <a href="https://github.com/10xgenomics">open-source tools</a> they’re developing. Given that I’ll probably be working with their platform, their tools, and data in the near future, this seems like an obvious choice to make.</p><div class="no-row-height column-margin column-container"><li id="fn2"><p><sup>2</sup>&nbsp;They’re the market leader in the field of single cell analysis.</p></li></div></div>
</section>
<section id="learning-curve-and-development-time" class="level2">
<h2 class="anchored" data-anchor-id="learning-curve-and-development-time">Learning Curve and Development Time</h2>
<p>It’s important to note that Rust has a steeper learning curve compared to languages like Python and Julia. Its ownership system and strict compile-time checks require developers to think in a more disciplined manner. This learning curve may initially slow down development progress, particularly for those new to Rust. However, the effort invested in mastering Rust’s concepts can pay off in terms of safer, more performant code in the long run.</p>
</section>
<section id="community-and-support" class="level2">
<h2 class="anchored" data-anchor-id="community-and-support">Community and Support</h2>
<p>While Rust has an active and passionate community, its presence within the bioinformatics domain might not be as extensive as that of Python or Julia. Consequently, finding bioinformatics-specific resources, libraries, and domain expertise in Rust could be more challenging. There’s a lack of introductory resources for bioinformatics in Python as compared to R, but still, python has a lot more resources than Julia. Rust has even fewer resources available than Julia.</p>
<p>When considering Rust for bioinformatics projects, it’s crucial to weigh the advantages of its safety and performance against the maturity of its bioinformatics ecosystem, the learning curve for developers, and the availability of community support.</p>
</section>
</section>
<section id="exploring-other-options" class="level1">
<h1>Exploring Other Options</h1>
<p>While exploring programming languages for bioinformatics, other languages like C, C++, MATLAB, and R may come to mind. While these languages have their merits, they may not be the optimal choices for all bioinformatics use cases. Let’s briefly discuss each one:</p>
<section id="c-and-c" class="level2">
<h2 class="anchored" data-anchor-id="c-and-c">C and C++</h2>
<p>C and C++ are powerful languages known for their performance and low-level control. They have been widely used in bioinformatics and computational biology for their ability to write highly optimized code. However, these languages require manual memory management and lack some of the safety features provided by languages like Rust. For complex bioinformatics projects, the development process in C or C++ can be more error-prone and time-consuming.</p>
</section>
<section id="matlab" class="level2">
<h2 class="anchored" data-anchor-id="matlab">MATLAB</h2>
<p>MATLAB is a popular language in scientific computing, widely used in fields like signal processing and data analysis. It offers a comprehensive set of tools and libraries for numerical computation. However, in terms of bioinformatics, Python has emerged as a more versatile and widely supported option. Python’s extensive libraries for data manipulation, machine learning, and visualization make it a more compelling choice for bioinformatics tasks that go beyond traditional numerical analysis.</p>
</section>
<section id="r" class="level2">
<h2 class="anchored" data-anchor-id="r">R</h2>
<p>R is a language specifically designed for statistical computing and data analysis. It has a rich ecosystem of packages tailored for statistical modeling, visualization, and data manipulation. While R can be suitable for certain bioinformatics tasks that heavily involve statistical analysis, it may not be the most ideal choice for broader bioinformatics projects that require integration with machine learning, high-performance computing, or scalable data processing. Python, with its broader applicability and robust libraries, provides a more comprehensive toolkit for such endeavors.</p>
<hr>
<p>In comparison to these options, Rust stands out for its unique combination of safety, performance, and memory management. Its emphasis on correctness and concurrency makes it a strong candidate for building reliable and efficient bioinformatics tools. Python, on the other hand, offers a versatile ecosystem, abundant libraries, and community support, making it a popular choice for general-purpose bioinformatics tasks. Julia brings its own unique set of advantages to the table. With its emphasis on speed, abstraction, and metaprogramming, Julia is particularly well-suited to meet the current and emerging demands of biomedical science. It aims to address the two-language problem by providing a unified language for both high-level scientific computing and low-level performance optimization.</p>
</section>
</section>
<section id="a-call-to-the-bioinformatics-and-programming-language-communities" class="level1">
<h1>A Call to the Bioinformatics and Programming Language Communities</h1>
<p>Now, I turn to the bioinformatics and programming language communities for their valuable insights and recommendations. As I embark on my Ph.D.&nbsp;journey and aim to create impactful bioinformatics tools, I invite you to share your experiences, opinions, and recommendations on which programming language you believe I should focus on for long-term proficiency in bioinformatics. Your input will help me make an informed decision, and together, we can contribute to the advancement of this exciting field.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The choice of programming language is a crucial decision for any bioinformatics researcher. As we navigate the vast landscape of bioinformatics, we must carefully consider the strengths, applications, and communities surrounding different programming languages. Python, Julia, and Rust offer unique advantages that cater to specific needs and preferences. However, the decision ultimately rests on our individual goals, research requirements, and personal affinity towards a particular language.</p>
<p>I invite you to share your thoughts, experiences, and recommendations in the comments below. Together, let’s explore the language conundrum and empower ourselves to make informed choices that will drive our success in the field of bioinformatics.</p>
<p><em>Note: As I embark on this journey, I will actively seek feedback and engage in discussions to refine my decision. Ultimately, my goal is to develop expertise in a programming language that will enable me to create innovative bioinformatics solutions and contribute to the scientific community.</em></p>


<!-- -->


</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-roesch2023" class="csl-entry">
Roesch, Elisabeth, Joe G. Greener, Adam L. MacLean, Huda Nassar, Christopher Rackauckas, Timothy E. Holy, and Michael P. H. Stumpf. 2023. <span>“Julia for Biologists.”</span> <em>Nature Methods</em> 20 (5): 655–64. <a href="https://doi.org/10.1038/s41592-023-01832-z">https://doi.org/10.1038/s41592-023-01832-z</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{2023,
  author = {, Aadam},
  title = {The {Language} {Conundrum:} {Picking} the {Right} {Tool} for
    {Bioinformatics} {Success}},
  date = {2023-06-06},
  url = {https://aadam.dev//blog/2023/06/06/language-conundrum},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-2023" class="csl-entry quarto-appendix-citeas">
Aadam. 2023. <span>“The Language Conundrum: Picking the Right Tool for
Bioinformatics Success.”</span> June 6, 2023. <a href="https://aadam.dev//blog/2023/06/06/language-conundrum">https://aadam.dev//blog/2023/06/06/language-conundrum</a>.
</div></div></section></div> ]]></description>
  <category>Commentary</category>
  <category>Language</category>
  <category>Julia</category>
  <category>Rust</category>
  <category>Python</category>
  <category>Advice</category>
  <guid>https://aadam.dev/blog/2023/06/06/language-conundrum/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>From Bits to Genes: Embarking on a Bioinformatics Journey</title>
  <dc:creator>Aadam </dc:creator>
  <link>https://aadam.dev/blog/2023/06/02/from-bits-to-genes/index.html</link>
  <description><![CDATA[ 




<p>Hello, world! With boundless enthusiasm and a touch of wonder, I invite you to explore the captivating world of bioinformatics through this blog. I’m thrilled to embark on this new chapter of my scientific journey and share it with all of you. As a computer scientist specializing in machine learning and deep learning, I’ve recently taken a plunge into the fascinating realm of bioinformatics, where genomics and data science converge.</p>
<p>Although I thoroughly enjoyed dipping my toes into the vast and mysterious sea of bioinformatics during my graduate-level course on bioinformatics, my decision to fully immerse myself in this realm was driven by my acceptance into the Ph.D.&nbsp;program in bioinformatics at IUPUI, starting this Fall. Along my academic journey, I have explored various fields like quantum computing, artificial general intelligence, and neurosymbolic AI, all with the aim of broadening my horizons. I am a fervent learner, constantly seeking to expand my knowledge and explore new concepts. However, upon delving deeper into the field of bioinformatics, I came to the realization that my understanding was limited, and there was a noticeable scarcity of quality resources to aid in my quest for knowledge. As someone coming from a Computer Science and Machine Learning background, where resources abound, this scarcity became all the more apparent.</p>
<section id="the-birth-of-the-blog" class="level2">
<h2 class="anchored" data-anchor-id="the-birth-of-the-blog">The Birth of the Blog</h2>
<p>The idea to create this blog was born from my own transition into bioinformatics and the realization that there’s a lack of resources specifically tailored for computer scientists entering this domain. With a firm belief in the power of knowledge sharing and community building, I aim to document my experiences, discoveries, and insights as I navigate the world of bioinformatics.</p>
</section>
<section id="unveiling-the-plan" class="level2">
<h2 class="anchored" data-anchor-id="unveiling-the-plan">Unveiling the Plan</h2>
<p>In this blog, my aim is to bridge the gap between computer science and bioinformatics, catering to both beginners and seasoned computer scientists who are venturing into this exciting field. The primary focus will revolve around the application of deep learning algorithms in analyzing single-cell transcriptomics data to uncover potential therapeutic treatments for cancer. Along the way, I’ll delve into various topics such as genomics, bioinformatics techniques, machine learning applications, and knowledge management strategies.</p>
</section>
<section id="what-to-expect" class="level2">
<h2 class="anchored" data-anchor-id="what-to-expect">What to Expect</h2>
<p>Expect a diverse array of content that combines technical insights with practical advice. Whether you’re just starting your journey in bioinformatics or seeking to expand your expertise, this blog will offer valuable resources, tutorials, and research findings to help you navigate the intricate landscape of genomics and data science. Additionally, I’ll occasionally share life commentary and reflections on the broader scientific landscape, offering a glimpse into the human side of scientific exploration.</p>
</section>
<section id="join-the-journey" class="level2">
<h2 class="anchored" data-anchor-id="join-the-journey">Join the Journey</h2>
<p>I invite you to join me on this bioinformatics adventure! I encourage you to actively participate by leaving comments, asking questions, and sharing your own insights. Let’s build a supportive community where we can learn from each other, inspire one another, and make meaningful contributions to the world of bioinformatics.</p>
<p>Farewell for now, and remember, the wonders of bioinformatics await! Feel free to explore the blog and share it with others who might find it valuable. Your suggestions, topic requests, and feedback are always welcome as we embark on this enlightening journey together. Let’s unlock the secrets of the genome and uncover groundbreaking discoveries in the pursuit of better cancer therapeutics.</p>


<!-- -->

</section>

 ]]></description>
  <category>Commentary</category>
  <category>Reflection</category>
  <guid>https://aadam.dev/blog/2023/06/02/from-bits-to-genes/index.html</guid>
  <pubDate>Fri, 02 Jun 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
